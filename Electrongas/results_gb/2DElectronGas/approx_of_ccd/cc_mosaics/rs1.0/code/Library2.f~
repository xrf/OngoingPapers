
!
!     Quicksort routine from W. H. Press et al.,
!     Numerical Recipes in Fortran 77, second ed.,
!     1992.
!
      SUBROUTINE sort2(n,arr,brr)
      INTEGER n,M,NSTACK
      REAL arr(n),brr(n)
      PARAMETER (M=0,NSTACK=1000)
!     Sorts an array arr(1:n) into ascending order using 
!     Quicksort, while making the corresponding rearrangement
!     of the array brr(1:n).
      INTEGER i,ir,j,jstack,k,l,istack(NSTACK)
      REAL a,b,temp
      jstack=0
      l=1
      ir=n
!     Insertion sort when subarray small enough.
 1    if(ir-l.lt.M)then
         do 12 j=l+1,ir
            a=arr(j)
            b=brr(j)
            do 11 i=j-1,l,-1
               if(arr(i).le.a)goto 2
               arr(i+1)=arr(i)
               brr(i+1)=brr(i)
 11         enddo 
            i=l-1
 2          arr(i+1)=a
            brr(i+1)=b
 12      enddo 
         if(jstack.eq.0)return
!     Pop stack and begin a new round of partitioning.
         ir=istack(jstack)
         l=istack(jstack-1)
         jstack=jstack-2
      else
!     Coose median of left, center and right elements as
!     partitioning element a. Also rearrange so that 
!     a(1) <= a(l+1) <= a(ir).
         k=(l+ir)/2
         temp=arr(k)
         arr(k)=arr(l+1)
         arr(l+1)=temp
         temp=brr(k)
         brr(k)=brr(l+1)
         brr(l+1)=temp
         if(arr(l).gt.arr(ir))then
            temp=arr(l)
            arr(l)=arr(ir)
            arr(ir)=temp
            temp=brr(l)
            brr(l)=brr(ir)
            brr(ir)=temp
         endif
         if(arr(l+1).gt.arr(ir))then
            temp=arr(l+1)
            arr(l+1)=arr(ir)
            arr(ir)=temp
            temp=brr(l+1)
            brr(l+1)=brr(ir)
            brr(ir)=temp
         endif
         if(arr(l).gt.arr(l+1))then
            temp=arr(l)
            arr(l)=arr(l+1)
            arr(l+1)=temp
            temp=brr(l)
            brr(l)=brr(l+1)
            brr(l+1)=temp
         endif
!     Initialize pointers for partitioning.
         i=l+1
         j=ir
!     Partitioning element.
         a=arr(l+1)
         b=brr(l+1)
!     Beginning of innermost loop.
 3       continue
!     Scan up to find element > a.
         i=i+1
         if(arr(i).lt.a)goto 3
 4       continue
!     Scan down to find element < a.
         j=j-1
         if(arr(j).gt.a)goto 4
!     Pointers crossed. Exit with partitioning 
!     complete. Exchange elements of both arrrays.
         if(j.lt.i)goto 5
         temp=arr(i)
         arr(i)=arr(j)
         arr(j)=temp
         temp=brr(i)
         brr(i)=brr(j)
         brr(j)=temp
!     End of innermost loop.
         goto 3
!     Insert partitioning element in both arrays.
 5       arr(l+1)=arr(j)
         arr(j)=a
         brr(l+1)=brr(j)
         brr(j)=b
         jstack=jstack+2
!     Push pointers to larger subarray on stack, 
!     process smaller subarray immediately.
         if(jstack.gt.NSTACK)pause 'NSTACK too small in sort2'
         if(ir-i+1.ge.j-l)then
            istack(jstack)=ir
            istack(jstack-1)=i
            ir=j-1
         else
            istack(jstack)=j-1
            istack(jstack-1)=l
            l=i
         endif
      endif
      goto 1  
      END 
