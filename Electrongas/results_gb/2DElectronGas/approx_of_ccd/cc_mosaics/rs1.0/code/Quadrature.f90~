
!
!     Class for numerical integration quadrature.
!
MODULE QuadratureMod
  USE ConstantsMod
  IMPLICIT NONE
  
  TYPE Quadrature
     SEQUENCE
     INTEGER :: n                                 ! Number of grid points
     REAL(DP) :: xmin,xmax                        ! Integration limits
     REAL(DP), ALLOCATABLE :: xpoints(:)          ! Grid points 
     REAL(DP), ALLOCATABLE :: weightx(:)          ! and weights
  END TYPE Quadrature
  
CONTAINS
  
  !
  !     Constructor for Quadrature object
  !
  FUNCTION Quadrature_(xmin,xmax,n) RESULT(quad)
    REAL(DP), INTENT(IN) :: xmin,xmax
    INTEGER, INTENT(IN) :: n
    TYPE(Quadrature) :: quad
    
    ALLOCATE(quad%xpoints(n),quad%weightx(n))
    quad%xpoints = 0.d0
    quad%weightx = 0.d0
    
    quad%xmin = xmin
    quad%xmax = xmax
    quad%n = n
    
    
  END FUNCTION Quadrature_
  
  !
  !     Deallocate vectors of the Quadrature object quad
  !
  SUBROUTINE deallocateQuad(quad)
    TYPE(Quadrature), INTENT(INOUT) :: quad
    
    DEALLOCATE(quad%xpoints,quad%weightx)
    
    
  END SUBROUTINE deallocateQuad
  
  !
  !         Program block phase-lib.f
  !         Coded by : Morten Hjorth-Jensen
  !         Language : FORTRAN 90
  !
  !
  !      This routine calculates gauss-legendre mesh points and weights       
  !      input:                                                               
  !      x1   : lower limit of the integration interval                       
  !      x2   : upper limit ---------- "" -------------                       
  !      n    : the desired number of mesh points                             
  !      output :                                                             
  !      x     : gauss-legendre mesh points on the interval (x1,x2)           
  !      w     : the corresponding weights                                    
  !      From  : Numerical recipes
  !      F90 version : M. Hjorth-Jensen
  !
  SUBROUTINE gauss_legendre(x1,x2,x,w,n)
    IMPLICIT NONE
    INTEGER :: i, j, m, n
    DOUBLE PRECISION :: eps, x1, x2, x, w 
    DIMENSION :: x(n), w(n) 
    PARAMETER (eps=3.D-14)
    DOUBLE PRECISION :: p1,p2,p3,pp,xl,xm,z,z1
    
    m=(n+1)/2
    xm=0.5d0*(x2+x1)
    xl=0.5d0*(x2-x1)
    DO i=1,m
       z1=0.
       z=COS(3.141592654d0*(i-.25d0)/(n+.5d0))
       DO WHILE ( ABS(z-z1) > EPS)
          p1=1.
          p2=0.
          DO j=1,n
             p3=p2
             p2=p1
             p1=((2.*j-1.)*z*p2-(j-1.)*p3)/j
          ENDDO
          pp=n*(z*p1-p2)/(z*z-1.)
          z1=z
          z=z-p1/pp
       ENDDO
       x(i)=xm-xl*z
       x(n+1-i)=xm+xl*z
       w(i)=2.*xl/((1.-z*z)*pp*pp)
       w(n+1-i)=w(i)
    ENDDO
    
  END SUBROUTINE gauss_legendre

  !
  !     Interface for a routine that sets up Gauss-Legendre 
  !     quadrature.
  !
  FUNCTION gaussLegendre(xmin,xmax,n) RESULT(quad)
    REAL(DP), INTENT(IN) :: xmin,xmax
    INTEGER, INTENT(IN) :: n
    TYPE(Quadrature) :: quad
    
    quad = Quadrature_(xmin,xmax,n)
    CALL gauss_legendre(quad%xmin,quad%xmax,quad%xpoints,&
         quad%weightx,quad%n)
    
    
  END FUNCTION gaussLegendre
  
  
END MODULE QuadratureMod
